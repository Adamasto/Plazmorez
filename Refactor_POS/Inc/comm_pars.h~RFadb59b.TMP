#ifndef COMM_PARS_H
#define COMM_PARS_H


#include <stdint.h>
#include "posicioner_config.h"




#pragma anon_unions
typedef union {
	struct {
		char ethAxis[SYMBOL_NUM_AXIS];
		char ethCmd[SYMBOL_NUM_CMD];
		char ethSymb;
		char ethValue[100];
		char endSymb;
	};
} TEthPacket;



enum{
	max_speed = 0,
	acceleration ,
	decceleration,	
	end_point,
	go,
	st,
	ts,
	es,
	gp,
	gs,
	ao,
	pp,
	gh,
};

typedef struct
{
	int command[COMMAND_NUM]; // for command retrieving

	int start_position_mm; // position in starting run
	int max_speed_mm; // max speed of engine (mm in second)
	int acceleration_mm; // acceleration of engine 
	int deceleration_mm; // deceleration of engine
	int end_position_mm; // target position
	int current_position_mm; // current position
	float currentSpeed_mm; // current speed (impulse of pwm in second on mm)
	float currentSpeed_encoder_mm; // current speed(encoder steps in second on mm)
	float current_acceleration_encoder_mm; // current acceleration (encoder steps in second * second on mm)
	
	int max_speed; 
	int acceleration;
	int deceleration;
	int end_position;
	float current_position;
	int start_position;
	float currentSpeed;
	float currentSpeed_st;
	int currentSpeed_encoder_count[MID_NUM];
	int currentSpeed_encoder_count_sum;
	float currentSpeed_encoder_st;
	float currentSpeed_encoder_ar;
	float current_acceleration_encoder;
	
	
	
	float next_speed;
	int deltaSpeed;
	
	double maxStepToAc;
	double maxStepToDc;
		
	int distance;
	
	float deltaAc;
	float deltaDc;
	int rot_sum;
	float enc_koef;
	float mm_koeff;
	double stepper;
	
	enum
	{
		ax_stop = 0,
		ax_go = 1,
		ax_test = 2,
		ax_button = 3,
	}Start;
	
	enum 
	{
		conf_ok = 1,
		conf_not = 0,
	}Config_State;
	enum
	{
		backward = 0,		
		no = 1,
		forward = 2,
	}Direct;
	
	enum
	{
		EPstop = 0,
		EPcont = 1,
	}EP_Flag;

	enum
	{
		Deccel = 0,
		Const = 1,
		Accel = 2,
		Ex_stop = 3,		
		Slow_stop = 4,
		go_home = 5,
	}Sp_Flag;
	
	uint16_t EncoderFlagForDir1;
	uint16_t EncoderFlagForDir2;
	int EncoderDiffFlags;
	int EncoderRotDir;
	
	float EncoderValue1;
	float EncoderValue2;
	
	uint8_t speedCount;
	uint8_t nextSpeedCount;
		
	int NumRotEncForTest;
	int NumSteEncpForTest; 
	
	float ImpAcceleration_st;
	float ImpAcceleration_mm;
	float ImpAcFlag1;
	float ImpAcFlag2;
	
	int EncoderAcceleration_st;
	float EncoderAcceleration_mm;
	float EncoderAcceleration_count[MID_NUM];
	float EncoderAcceleration_sum;
	float EncoderAcceleration_mid_mm;
	float EncoderSpeedFlagForAccel1;
	float EncoderSpeedFlagForAccel2;
	//--------------------------------
	enum
	{
		noError = 0,
		driverError = 1,
		recieveExStopCommand = 2,
		positionError = 3,
		engineStupid = 4,
		encoderDirError = 5,
		encoderConnectError = 6,
	}ErrorState;

	enum
	{
		inRun = 0,
		normalStop = 1,
		forwardEndSwitcher = 2,
		backwardEndSwitcher = 3,
		forwardSoftLimit = 4,
		backwardSoftLimit = 5,
		haveError = 6,
		recieveSlowStopCommand = 7,
	}CauseOfStop; 

	enum
	{
		run = 1,
		stand = 2,
		accelerate = 4,
		decelerate = 8,
		wait = 16,
		complete = 32,
	}engineState;
	
	enum
	{
		reset = 0,
		set = 1,
	};
	
	float errorPosition;
	
	uint8_t waitFlag;
	
	int commonWidth;
	int forwardSoftLineValue;
	int backwardSoftLineValue;
	uint8_t SwitcherFlags; // 0 bit - backSwitcher, 1 bit - forwardSwitcher, 2 bit - backwardSoftLine,  3 bit - forwardSoftLine
	enum 
	{
		backSwitcher = 1,
		forwardSwitcher = 2,
		backSoftLine = 4,
		forwardSoftLine = 8,
	};
	uint8_t flagOfCalibration;
}AxisParam;




void ComPar_GetPacket(char* data, int len);
char* ComPar_GetAxis();
char* ComPar_GetCommand();
int ComPar_GetValue();
void AxisInit();

void setCommand(uint8_t axis, uint8_t command, int len);

void RunCommand(uint8_t cur_ax);
void TsCommand(uint8_t cur_ax);

void ComPar_SetComValue(uint8_t cur_ax, uint8_t cur_cmd, char* value);



#endif /* COMM_PARS_H */